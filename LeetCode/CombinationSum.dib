#!markdown

Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.

#!markdown

Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]

#!markdown

Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

#!csharp

public class Solution {
    public IList<IList<int>> CombinationSum(int[] candidates, int target) {
        // 2,3,6,7 target =7 
       
        var result = new List<IList<int>>();
        
        if(target ==0)
        {
            return new List<IList<int>>() {  };
        }
        
        
        for(var idx =0; idx < candidates.Length; ++idx)
        {
            var result.Add(CombinationSum(candidates, target-candidates[idx]));
        }
        
        return result;
    }
    
    
}
