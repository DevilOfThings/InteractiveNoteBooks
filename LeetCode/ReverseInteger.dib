#!markdown

Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [╬ô├¬├å231,  231 ╬ô├¬├å 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

#!markdown

My feeble 1st attempt, with 2 loops

#!csharp

public class Solution {
    
    public static int Reverse(int x) {

        var q = x;
        var r = x;

        int result =0;
        var stack = new Stack<int>();    
        
        do
        {
            r = q%10;
            q = q/10;
            //Console.WriteLine($"q: {q}");
            //Console.WriteLine($"r: {r}");
            
            stack.Push(r);
            
            //Console.WriteLine($"result: {stack}");
            
        } while(q != 0);

        int b = 1;
        while(stack.Count()>0)
        {
            var popped = stack.Pop();
            //Console.WriteLine($"p: {popped}");
            try {
                result = checked(result + popped*b);

            }
            catch(OverflowException)
            {
                return 0;
            }
            b*=10;
        }
        

        return result;
    }
}

Console.WriteLine($"{Solution.Reverse(123)} {321}");
Console.WriteLine($"{Solution.Reverse(-123)} {-321}");
Console.WriteLine($"{Solution.Reverse(120)} {21}");

#!csharp

public class Solution {
    public static int Reverse(int x) {    

        var r = x;
        var q = x;
        var result = 0;

        do {

            r = q%10;
            q = q/10;
            
            try {

            result = checked(result*10 +(r));
            
            Console.WriteLine($"{r} {result}");
            }
            catch(OverflowException)
            {
                return 0;
            }

            
        } while(q!=0);

        return result;
    }
}

Console.WriteLine($"{Solution.Reverse(123)} {321}");
