#!markdown

1480. Running Sum of 1d Array

Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]ΓÇªnums[i]).

Return the running sum of nums.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].
Example 2:

Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].
Example 3:

Input: nums = [3,1,2,10,1]
Output: [3,4,6,16,17]
 

Constraints:

1 <= nums.length <= 1000
-10^6 <= nums[i] <= 10^6

#!csharp

public class Solution {
    public static int[] RunningSum(int[] nums) {    

        for(var i =1; i <nums.Length; ++i)
        {
            nums[i] += nums[i-1];
        }        

        return nums;
    }
}

var sb = new StringBuilder();
sb.AppendJoin(",", Solution.RunningSum(new int[] {1,2,3,4}));
Console.WriteLine($"{sb.ToString()} [1,3,6,10]");

sb.AppendJoin(",", Solution.RunningSum(new int[] {1,1,1,1,1}));
Console.WriteLine($"{sb.ToString()} [1,2,3,4,5]");

sb.AppendJoin(",", Solution.RunningSum(new int[] {3,1,2,10,1}));
Console.WriteLine($"{sb.ToString()} [3,4,6,16,17]");
